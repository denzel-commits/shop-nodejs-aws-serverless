(()=>{"use strict";var e={249:(e,o,t)=>{t.d(o,{w:()=>a});const{PG_HOST:r,PG_PORT:s,PG_DBNAME:i,PG_USERNAME:c,PG_PASSWORD:n}=process.env,a={host:r,port:s,database:i,user:c,password:n,ssl:{rejectUnauthorized:!1},connectionTimeoutMillis:5e3}},782:(e,o,t)=>{t.d(o,{L:()=>r});const r=(e,o)=>({statusCode:e,headers:{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Credentials":!0},body:JSON.stringify(o)})},444:(e,o,t)=>{t.d(o,{z:()=>n});var r=t(806),s=t.n(r),i=t(657),c=t.n(i);const n=e=>s()(e).use(c()())},806:e=>{e.exports=require("@middy/core")},657:e=>{e.exports=require("@middy/http-json-body-parser")},480:e=>{e.exports=require("aws-sdk")},723:e=>{e.exports=require("pg")},43:e=>{e.exports=require("source-map-support/register")}},o={};function t(r){var s=o[r];if(void 0!==s)return s.exports;var i=o[r]={exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var o=e&&e.__esModule?()=>e.default:()=>e;return t.d(o,{a:o}),o},t.d=(e,o)=>{for(var r in o)t.o(o,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:o[r]})},t.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{t.r(r),t.d(r,{main:()=>a}),t(43);var e=t(723),o=t(782),s=t(444),i=t(480),c=t.n(i),n=t(249);const a=(0,s.z)((async t=>{console.log("catalogBatchProcess lambda launched"),console.log(t);const r={region:"eu-west-1"};try{c().config.update(r);const s=new(c().SNS),i=t.Records.map((({body:e})=>e));t.Records.forEach((e=>{console.log("messageAttributes",e.messageAttributes)}));const a=new e.Client(n.w);await a.connect();for(const e of i){console.log("product",e);const{title:o,description:t,price:r,count:s}=JSON.parse(e),i="SELECT id, title FROM public.products WHERE title = $1",{rows:c}=await a.query(i,[o]);if(console.log("check product from db with title: "+o+", result = ",c),c.length){console.log("update product by id",c[0].id),await a.query("BEGIN");const e="UPDATE public.products SET title = $1, description = $2, price = $3 WHERE id = $4",i=(await a.query(e,[o,t,r,c[0].id]),"UPDATE public.stocks SET count = $1 WHERE product_id = $2"),n=[s,c[0].id];await a.query(i,n),await a.query("COMMIT")}else{console.log("insert new product",e),await a.query("BEGIN");const i="INSERT INTO public.products(title, description, price) VALUES($1, $2, $3) RETURNING id",c=await a.query(i,[o,t,r]),n="INSERT INTO public.stocks(product_id, count) VALUES ($1, $2)",d=[c.rows[0].id,s];await a.query(n,d),await a.query("COMMIT")}}const d={Subject:"Products import finished",Message:JSON.stringify(i),TopicArn:process.env.SNS_ARN};return s.publish(d,(e=>{e?console.log("Error",e):console.log("Send product to SNS queue",i)})),(0,o.L)(200,{message:"Products import finished"})}catch(e){return console.log("Failed to import products",e),(0,o.L)(500,{message:"Failed to import products"})}}))})();var s=exports;for(var i in r)s[i]=r[i];r.__esModule&&Object.defineProperty(s,"__esModule",{value:!0})})();
//# sourceMappingURL=handler.js.map