{"version":3,"file":"src/functions/catalogBatchProcess/handler.js","mappings":"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","sources":["webpack://product-service/./src/config/database-config.ts","webpack://product-service/./src/libs/apiGateway.ts","webpack://product-service/./src/libs/lambda.ts","webpack://product-service/external \"@middy/core\"","webpack://product-service/external \"@middy/http-json-body-parser\"","webpack://product-service/external \"aws-sdk\"","webpack://product-service/external \"pg\"","webpack://product-service/external \"source-map-support/register\"","webpack://product-service/webpack/bootstrap","webpack://product-service/webpack/runtime/compat get default export","webpack://product-service/webpack/runtime/define property getters","webpack://product-service/webpack/runtime/hasOwnProperty shorthand","webpack://product-service/webpack/runtime/make namespace object","webpack://product-service/./src/functions/catalogBatchProcess/handler.ts"],"sourcesContent":["const {PG_HOST, PG_PORT, PG_DBNAME, PG_USERNAME, PG_PASSWORD} = process.env;\n\nconst dbOptions = {\n  host: PG_HOST,\n  port: PG_PORT,\n  database: PG_DBNAME,\n  user: PG_USERNAME,\n  password: PG_PASSWORD,\n  ssl:{\n    rejectUnauthorized: false\n  },\n  connectionTimeoutMillis: 5000\n};\n\nexport {dbOptions};","import type { APIGatewayProxyEvent, APIGatewayProxyResult, Handler } from \"aws-lambda\"\nimport type { FromSchema } from \"json-schema-to-ts\";\n\ntype ValidatedAPIGatewayProxyEvent<S> = Omit<APIGatewayProxyEvent, 'body'> & { body: FromSchema<S> }\nexport type ValidatedEventAPIGatewayProxyEvent<S> = Handler<ValidatedAPIGatewayProxyEvent<S>, APIGatewayProxyResult>\n\nexport const formatJSONResponse = (status: number, response: Record<string, unknown> | Record<string, unknown>[]) => {\n  return {\n    statusCode: status,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Credentials': true,\n    },\n    body: JSON.stringify(response)\n  }\n}\n\n","import middy from \"@middy/core\"\nimport middyJsonBodyParser from \"@middy/http-json-body-parser\"\n\nexport const middyfy = (handler) => {\n  return middy(handler).use(middyJsonBodyParser())\n}\n","module.exports = require(\"@middy/core\");","module.exports = require(\"@middy/http-json-body-parser\");","module.exports = require(\"aws-sdk\");","module.exports = require(\"pg\");","module.exports = require(\"source-map-support/register\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import 'source-map-support/register';\nimport {Client} from 'pg';\n\nimport { formatJSONResponse } from '@libs/apiGateway';\nimport { middyfy } from '@libs/lambda';\n\nimport AWS from 'aws-sdk';\nimport { dbOptions } from '../../config/database-config';\n\nconst catalogBatchProcess = async (event) => {\n    console.log(\"catalogBatchProcess lambda launched\");\n    console.log(event);\n    const clientParams = {region: 'eu-west-1'};\n\n    try{      \n      AWS.config.update(clientParams);\n      const sns = new AWS.SNS();\n\n      const products = event.Records.map( ({body}) => body );\n\n      event.Records.forEach( (record) => {\n        console.log('messageAttributes', record.messageAttributes);\n      } );\n\n      // -- CONNECT TO DATABASE\n    const client = new Client(dbOptions);\n    await client.connect();\n\n      for(const product of products){\n\n          console.log('product', product);\n\n          const {title, description, price, count} = JSON.parse(product);\n\n          const selectText = 'SELECT id, title FROM public.products WHERE title = $1';\n          const {rows: products} = await client.query(selectText, [title]);\n\n          console.log('check product from db with title: ' + title + ', result = ', products);\n\n          if(products.length){\n            console.log('update product by id', products[0].id);\n\n              // -- BEGIN TRANSACTION\n              await client.query('BEGIN');\n              \n              const queryText = 'UPDATE public.products SET title = $1, description = $2, price = $3 WHERE id = $4';\n              const res = await client.query(queryText, [title, description, price, products[0].id]);\n              \n              const updateStocksText = 'UPDATE public.stocks SET count = $1 WHERE product_id = $2';\n              const updateStocksValues = [count, products[0].id];\n              await client.query(updateStocksText, updateStocksValues);\n\n              await client.query('COMMIT');  \n\n          }else{\n            console.log('insert new product', product);\n\n            // -- BEGIN TRANSACTION\n            await client.query('BEGIN');\n            \n            const queryText = 'INSERT INTO public.products(title, description, price) VALUES($1, $2, $3) RETURNING id';\n            const res = await client.query(queryText, [title, description, price]);\n            \n            const insertStocksText = 'INSERT INTO public.stocks(product_id, count) VALUES ($1, $2)';\n            const insertStocksValues = [res.rows[0].id, count];\n            await client.query(insertStocksText, insertStocksValues);\n\n            await client.query('COMMIT');  \n          }\n\n          // const query = {\n          //   // give the query a unique name\n          //   name: 'fetch-product',\n          //   text: 'SELECT * FROM user WHERE title = $1',\n          //   values: [product.title],\n          // }\n      }\n\n      // send notification\n      const params = {\n        Subject: 'Products import finished',\n        Message: JSON.stringify(products),\n        TopicArn: process.env.SNS_ARN\n        };\n\n      sns.publish(params, (err) => {\n        if (err) {\n          console.log(\"Error\", err);\n        } else {\n          console.log(\"Send product to SNS queue\", products);\n        }\n      });\n      \n      return formatJSONResponse(200, {message: 'Products import finished'});\n    }catch(e){\n      console.log(\"Failed to import products\", e);\n      return formatJSONResponse(500, {\n        message: \"Failed to import products\"\n      });\n    }\n}\n\nexport const main = middyfy(catalogBatchProcess);\n"],"names":["PG_HOST","PG_PORT","PG_DBNAME","PG_USERNAME","PG_PASSWORD","process","env","dbOptions","host","port","database","user","password","ssl","rejectUnauthorized","connectionTimeoutMillis","formatJSONResponse","status","response","statusCode","headers","body","JSON","stringify","middyfy","handler","use","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","main","async","event","console","log","clientParams","region","sns","products","Records","map","forEach","record","messageAttributes","client","Client","connect","product","title","description","price","count","parse","selectText","rows","query","length","id","queryText","updateStocksText","updateStocksValues","res","insertStocksText","insertStocksValues","params","Subject","Message","TopicArn","SNS_ARN","publish","err","message","e"],"sourceRoot":""}