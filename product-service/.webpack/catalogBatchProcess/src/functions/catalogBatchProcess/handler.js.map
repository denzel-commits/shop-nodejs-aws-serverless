{"version":3,"file":"src/functions/catalogBatchProcess/handler.js","mappings":"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","sources":["webpack://product-service/./src/config/config.ts","webpack://product-service/./src/config/database-config.ts","webpack://product-service/./src/libs/apiGateway.ts","webpack://product-service/./src/libs/lambda.ts","webpack://product-service/./src/services/index.ts","webpack://product-service/./src/services/product-service.ts","webpack://product-service/external \"@middy/core\"","webpack://product-service/external \"@middy/http-json-body-parser\"","webpack://product-service/external \"aws-sdk\"","webpack://product-service/external \"dotenv\"","webpack://product-service/external \"pg\"","webpack://product-service/external \"source-map-support/register\"","webpack://product-service/webpack/bootstrap","webpack://product-service/webpack/runtime/compat get default export","webpack://product-service/webpack/runtime/define property getters","webpack://product-service/webpack/runtime/hasOwnProperty shorthand","webpack://product-service/webpack/runtime/make namespace object","webpack://product-service/./src/functions/catalogBatchProcess/handler.ts"],"sourcesContent":["import { config } from 'dotenv';\nconfig();\n\n// import { resolve } from \"path\"\n// import { config } from \"dotenv\"\n// config({ path: resolve(__dirname, \"../../.env\") })","const {PG_HOST, PG_PORT, PG_DBNAME, PG_USERNAME, PG_PASSWORD} = process.env;\n\nconst dbOptions = {\n  host: PG_HOST,\n  port: PG_PORT,\n  database: PG_DBNAME,\n  user: PG_USERNAME,\n  password: PG_PASSWORD,\n  ssl:{\n    rejectUnauthorized: false\n  },\n  connectionTimeoutMillis: 5000\n};\n\nexport {dbOptions};","import type { APIGatewayProxyEvent, APIGatewayProxyResult, Handler } from \"aws-lambda\"\nimport type { FromSchema } from \"json-schema-to-ts\";\n\ntype ValidatedAPIGatewayProxyEvent<S> = Omit<APIGatewayProxyEvent, 'body'> & { body: FromSchema<S> }\nexport type ValidatedEventAPIGatewayProxyEvent<S> = Handler<ValidatedAPIGatewayProxyEvent<S>, APIGatewayProxyResult>\n\nexport const formatJSONResponse = (status: number, response: Record<string, unknown> | Record<string, unknown>[]) => {\n  return {\n    statusCode: status,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Credentials': true,\n    },\n    body: JSON.stringify(response)\n  }\n}\n\n","import middy from \"@middy/core\"\nimport middyJsonBodyParser from \"@middy/http-json-body-parser\"\n\nexport const middyfy = (handler) => {\n  return middy(handler).use(middyJsonBodyParser())\n}\n","import '../config/config';\n\nexport const findProductByTitle = (process.env.NODE_ENV === 'test') ?\n    require('./product-service-mock.ts').findProductByTitle:\n    require('./product-service.ts').findProductByTitle;\n\nexport const updateProduct = (process.env.NODE_ENV === 'test') ?\n    require('./product-service-mock.ts').updateProduct:\n    require('./product-service.ts').updateProduct;\n\nexport const insertProduct = (process.env.NODE_ENV === 'test') ?\n    require('./product-service-mock.ts').insertProduct:\n    require('./product-service.ts').insertProduct;\n","import  { IProduct } from '../interfaces/product';\n\nconsole.log('product-service imported');\n\nconst getAllProducts = async ():Promise<IProduct[]> => {\n    return Array();\n}\n\nconst findProductById = async (client, id: string):Promise<IProduct | null> => {\n\n    // const query = {\n    //   // give the query a unique name\n    //   name: 'fetch-product',\n    //   text: 'SELECT * FROM user WHERE title = $1',\n    //   values: [product.title],\n    // }\n\n    const selectText = 'SELECT * FROM public.products WHERE id = $1';\n    const {rows: products} = await client.query(selectText, [id]);\n\n    if(!products.length){\n        return null;\n    }\n  \n    return products[0];\n}\n\nconst findProductByTitle = async (client, title: string):Promise<IProduct | null> => {\n\n    const selectText = 'SELECT * FROM public.products WHERE title = $1';\n    const {rows: products} = await client.query(selectText, [title]);\n\n    if(!products.length){\n        return null;\n    }\n  \n    return products[0];\n}\n\nconst insertProduct = async (client, product: IProduct):Promise<string> => {\n\n    const {title, description, price, count} = product;\n\n    try {\n        // -- BEGIN TRANSACTION\n        await client.query('BEGIN');\n\n        const queryText = 'INSERT INTO public.products(title, description, price) VALUES($1, $2, $3) RETURNING id';\n        const res = await client.query(queryText, [title, description, price]);\n        \n        const insertStocksText = 'INSERT INTO public.stocks(product_id, count) VALUES ($1, $2)';\n        const insertStocksValues = [res.rows[0].id, count];\n        await client.query(insertStocksText, insertStocksValues);\n\n        await client.query('COMMIT');  \n\n        return res.rows[0].id;\n    } catch (error) {\n        await client.query('ROLLBACK');\n        return '0';\n    }  \n    \n}\n\nconst updateProduct = async (client, product: IProduct, id: string):Promise<string> => {\n\n    const {title, description, price, count} = product;\n \n    try {\n        // -- BEGIN TRANSACTION\n        await client.query('BEGIN');\n\n        const queryText = 'UPDATE public.products SET title = $1, description = $2, price = $3 WHERE id = $4';\n        await client.query(queryText, [title, description, price, id]);\n\n        const updateStocksText = 'UPDATE public.stocks SET count = $1 WHERE product_id = $2';\n        const updateStocksValues = [count, id];\n        await client.query(updateStocksText, updateStocksValues);\n\n        await client.query('COMMIT');\n\n        return id;\n        \n    } catch (error) {\n        await client.query('ROLLBACK');\n\n        return '0';\n    }\n\n\n}\n\nexport {getAllProducts, findProductById, findProductByTitle, insertProduct, updateProduct};","module.exports = require(\"@middy/core\");","module.exports = require(\"@middy/http-json-body-parser\");","module.exports = require(\"aws-sdk\");","module.exports = require(\"dotenv\");","module.exports = require(\"pg\");","module.exports = require(\"source-map-support/register\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import 'source-map-support/register';\nimport { Client } from 'pg';\nimport { formatJSONResponse } from '@libs/apiGateway';\nimport { middyfy } from '@libs/lambda';\nimport AWS from 'aws-sdk';\n\nimport { dbOptions } from '../../config/database-config';\nimport { findProductByTitle, updateProduct, insertProduct } from '../../services/index';\n\nconst catalogBatchProcess = async (event) => {\n    console.log(\"catalogBatchProcess lambda launched\");\n    console.log(event);\n    const clientParams = {region: 'eu-west-1'};\n\n    try{      \n      AWS.config.update(clientParams);\n      const sns = new AWS.SNS();\n\n      const products = event.Records.map( ({body}) => JSON.parse(body) );\n\n      event.Records.forEach( (record) => {\n        console.log('messageAttributes', record.messageAttributes);\n      } );\n\n    // -- CONNECT TO DATABASE\n    let client;\n    if(process.env.NODE_ENV !== 'test'){\n      client = new Client(dbOptions);\n      await client.connect();\n    }else{\n      client = undefined;\n    }\n\n      for(const product of products){\n\n          console.log('product', product);\n\n          const { title } = product;\n          const foundProduct = await findProductByTitle(client, title);\n\n          console.log('check product from repository with title: ' + title + ', result = ', foundProduct);\n\n          if(foundProduct){\n            console.log('update product by id', foundProduct.id);\n            await updateProduct(client, product, foundProduct.id);\n          }else{\n            console.log('insert new product', product);\n            await insertProduct(client, product);\n          }\n\n          // send notification\n          const params = {\n            Subject: 'Products import finished',\n            Message: JSON.stringify(product),\n            TopicArn: process.env.SNS_ARN\n            };\n\n          sns.publish(params, (err) => {\n            if (err) {\n              console.log(\"Error\", err);\n            } else {\n              console.log(\"Send product to SNS queue\", product);\n            }\n          });\n      \n      }\n\n      return formatJSONResponse(200, {message: 'Products import finished'});\n    }catch(e){\n      console.log(\"Failed to import products\", e);\n      return formatJSONResponse(500, {\n        message: \"Failed to import products\"\n      });\n    }\n}\n\nexport const main = middyfy(catalogBatchProcess);\n"],"names":["config","PG_HOST","PG_PORT","PG_DBNAME","PG_USERNAME","PG_PASSWORD","process","env","dbOptions","host","port","database","user","password","ssl","rejectUnauthorized","connectionTimeoutMillis","formatJSONResponse","status","response","statusCode","headers","body","JSON","stringify","middyfy","handler","use","findProductByTitle","updateProduct","insertProduct","console","log","async","client","title","rows","products","query","length","product","description","price","count","queryText","res","insertStocksText","insertStocksValues","id","error","updateStocksText","updateStocksValues","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","main","event","clientParams","region","sns","Records","map","parse","forEach","record","messageAttributes","Client","connect","foundProduct","params","Subject","Message","TopicArn","SNS_ARN","publish","err","message","e"],"sourceRoot":""}